//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DirectEve.LicenseServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartupResponseV1", Namespace="http://license.thehackerwithin.com")]
    [System.SerializableAttribute()]
    internal partial class StartupResponseV1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActiveInstancesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChallengeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid InstanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LicenseKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SupportInstancesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int ActiveInstances {
            get {
                return this.ActiveInstancesField;
            }
            set {
                if ((this.ActiveInstancesField.Equals(value) != true)) {
                    this.ActiveInstancesField = value;
                    this.RaisePropertyChanged("ActiveInstances");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Challenge {
            get {
                return this.ChallengeField;
            }
            set {
                if ((object.ReferenceEquals(this.ChallengeField, value) != true)) {
                    this.ChallengeField = value;
                    this.RaisePropertyChanged("Challenge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Guid InstanceId {
            get {
                return this.InstanceIdField;
            }
            set {
                if ((this.InstanceIdField.Equals(value) != true)) {
                    this.InstanceIdField = value;
                    this.RaisePropertyChanged("InstanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Guid LicenseKey {
            get {
                return this.LicenseKeyField;
            }
            set {
                if ((this.LicenseKeyField.Equals(value) != true)) {
                    this.LicenseKeyField = value;
                    this.RaisePropertyChanged("LicenseKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Signature {
            get {
                return this.SignatureField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureField, value) != true)) {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int SupportInstances {
            get {
                return this.SupportInstancesField;
            }
            set {
                if ((this.SupportInstancesField.Equals(value) != true)) {
                    this.SupportInstancesField = value;
                    this.RaisePropertyChanged("SupportInstances");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseFault", Namespace="http://license.thehackerwithin.com")]
    [System.SerializableAttribute()]
    internal partial class LicenseFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Fault {
            get {
                return this.FaultField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultField, value) != true)) {
                    this.FaultField = value;
                    this.RaisePropertyChanged("Fault");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateResponseV1", Namespace="http://license.thehackerwithin.com")]
    [System.SerializableAttribute()]
    internal partial class UpdateResponseV1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChallengeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid InstanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Challenge {
            get {
                return this.ChallengeField;
            }
            set {
                if ((object.ReferenceEquals(this.ChallengeField, value) != true)) {
                    this.ChallengeField = value;
                    this.RaisePropertyChanged("Challenge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Guid InstanceId {
            get {
                return this.InstanceIdField;
            }
            set {
                if ((this.InstanceIdField.Equals(value) != true)) {
                    this.InstanceIdField = value;
                    this.RaisePropertyChanged("InstanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Signature {
            get {
                return this.SignatureField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureField, value) != true)) {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://license.thehackerwithin.com", ConfigurationName="LicenseServer.ILicenseV1")]
    internal interface ILicenseV1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://license.thehackerwithin.com/ILicenseV1/Startup", ReplyAction="http://license.thehackerwithin.com/ILicenseV1/StartupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LicenseFault), Action="http://license.thehackerwithin.com/ILicenseV1/StartupLicenseFaultFault", Name="LicenseFault")]
        StartupResponseV1 Startup(string email, System.Guid licenseKey, string version, string challenge, string signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://license.thehackerwithin.com/ILicenseV1/KeepAlive", ReplyAction="http://license.thehackerwithin.com/ILicenseV1/KeepAliveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LicenseFault), Action="http://license.thehackerwithin.com/ILicenseV1/KeepAliveLicenseFaultFault", Name="LicenseFault")]
        UpdateResponseV1 KeepAlive(string email, System.Guid licenseKey, System.Guid instanceId, string challenge, string signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://license.thehackerwithin.com/ILicenseV1/Shutdown", ReplyAction="http://license.thehackerwithin.com/ILicenseV1/ShutdownResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LicenseFault), Action="http://license.thehackerwithin.com/ILicenseV1/ShutdownLicenseFaultFault", Name="LicenseFault")]
        UpdateResponseV1 Shutdown(string email, System.Guid licenseKey, System.Guid instanceId, string challenge, string signature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface ILicenseV1Channel : ILicenseV1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class LicenseV1Client : System.ServiceModel.ClientBase<ILicenseV1>, ILicenseV1 {
        
        public LicenseV1Client() {
        }
        
        public LicenseV1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseV1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseV1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseV1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StartupResponseV1 Startup(string email, System.Guid licenseKey, string version, string challenge, string signature) {
            return base.Channel.Startup(email, licenseKey, version, challenge, signature);
        }
        
        public UpdateResponseV1 KeepAlive(string email, System.Guid licenseKey, System.Guid instanceId, string challenge, string signature) {
            return base.Channel.KeepAlive(email, licenseKey, instanceId, challenge, signature);
        }
        
        public UpdateResponseV1 Shutdown(string email, System.Guid licenseKey, System.Guid instanceId, string challenge, string signature) {
            return base.Channel.Shutdown(email, licenseKey, instanceId, challenge, signature);
        }
    }
}
